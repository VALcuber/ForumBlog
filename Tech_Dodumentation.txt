Данный сайт реализован по технологии MVC.  Далее в этой технической документации будут описаны название файлов, каталогов, методы и их предназначение.

    Начнём с каталога css. Этот каталог предназначен для стилей. В нём находятся стили ля административной страницы, стили для общих страниц и bootstrap.

    Далее идёт каталог img. Он предназначен для титульного изображения для сайта и его мини венсии для вкладки браузера.

    Следующим идёт каталог js. Он содержит JavaScript-коды для сайта. Вот их предназначение:

        - admin-panel.js - Требуется для коррекной работы админ панели.
        - category.js - Данный код предназначен для корректного отображения категорий форума и блога в бургере.
        - forum.comments.js - Этот файл отвечает за отображение комментариев на сайте.
        - index.js - В этом файле собран код для: Отображения меню бургера, меню пользователя и возможности их трансформации. Запрета поведения ссылки по умолчанию на кнопке
                  категорий. Отображения подменю категорий при наведении курсора. Переключения класса «active» для кнопок меню профиля. Перестраивания меню навигации по
                  категориям из сохраненных элементов. Отображения выбранного изображения в качестве фона и автоматической отправки формы.
        - profile.js - Код для нормального функционирования страницы профиля
        - tokens.js - Файл нужен для корректной авторизации пользователей.

    Каталог uploads предназначен для сохранения файлов изображения пользователей.

    Каталог conf это каталог для хранения фйлов конфигурации:

        - crypt(data & keys).json - файлы для хранения зашифрованных данных пользователей и ключей для их расшифровки.
        - db.php - файл для доступа к базе данных сайта.
        - google_oauth.php - Это файл конфигурации который настраивает аутонтефикацию на сайте через сервис гугл.
        - router.php - Это файл для перенаправления пользователя при переходе по ссылкам или при заходе на сайт.

    Каталог controllers включает в себя контроллеры. Далее будут перечислены названия контроллеров, их методы а так же предназначение обоих:

        - AddNewsController.php - Данный контроллер предназначен для добавления новостей (администраторам и можераторам).
        - All_for_certain_categoryController.php - Предназначен для отображения всех записей для определенной категории в форуме и блоге
        - BlogController.php -Предназначен для отображения категорий которые относятся к блогу
            Методы:
                echo_page_content - Для отображения категорий;
                echo_page_titles - Для отображения слова Блог и для кнопки добавления записи
                echo_latest_blog_posts - Отображает последние записи которые были зделаны в блоге.
        - Categories_allController.php - Контроллер отображает все асолютно групы категорий.
        - CommentController.php - Контроллер нужен для добавления комментариев на сайте.
        - Controller.php - Главный контроллер сайта.
            Методы:
                - admin_panel - Включает в себя html код для вывода административной панели
                - echo_topmenu - Содержит заброс к бд для отображения категорий в топ меню и подальшего их вывода на страницу
                - echo_burger - Содержит заброс к бд для отображения категорий в бургере и подальшего их вывода
                - translit - Функция нужна для перевода латинницы в кирилицу
                - translit_reverse - А эта нужна для обратного перевода
                - echo_form_signin - Выводит форму регистрации/авторизации
                - LogIn - При успешной авторизации создаёт и привязывает токен к пользователю. Задаётся путь к файлу с токенами tokens.js. Если файл не найден то создаётся
                        пустой массив. Если файл существует — читаем содержимое и декодируем JSON в ассоциативный массив. Перебираются все токены.  Если в массиве найдена
                        запись, где значением является текущий $login пользователя — удаляем этот токен. Таким образом, у каждого пользователя будет только один активный токен.
                - load_tokens - Функция нужна для чтения токена с файла
                - token_check - Функция для проверки соответствия токена во избежание подмены
                - deleteToken - Функция удаляет токен при выходе пользователя с аккаунта или по истечении определенного времени
                - generate_crypto_keys - Тут генерируется пара ключ-значения для шифрования данных для токена
                - encrypting_data - Шифрование данных полученых с бд
                - get_decrypted_post_data - Дешифровка данных для их дальнейшего использования
        - ForumController.php - Делает тоже самое что и BlogController.php, но для форума
        - GoogleAuthController.php - Нужен для работы гугл сервиса авторизации.
            Методы:
                glogin - Перенаправляет на страницу авторизации гугл
                callback - Нужен для получения данных с гугла при успешной авторизации
                showError - Форма вывода ошибок
                getGoogleAuthUrl - Указаны параметры которы передаются в гугл для авторизации
                getAccessToken - Получение токена от гугла
                getGoogleUserInfo - Получение данных пользователя от гугла
                processGoogleUserFromDB - Создание пользователя на сайте (если его не было ранее) или авторизация уже существующего по гугл аккаунту
        - IndexController.php - Это центральная страница сайта
             Методы:
                - echo_random_blog_topics - Выводит групы категорий относящиеся к блогу
                - make_Random_Array_blog - функуия позволяет тасовать данные и делать отображение групп категорий случайными при каждом обновлении страницы
                - echo_latest_news - Выводит последние новости добавленные администраторами
                - echo_random_forum_topics- Выводит групы категорий относящиеся к форуму
                - make_Random_Array_forum- функуия позволяет тасовать данные и делать отображение групп категорий случайными при каждом обновлении страницы
        - ManageUsersController.php - Контроллер нужен для отображения списка пользователей (для администрации сайта)
        - PageController.php - Отображает пост блога, форума или новости. Если есть коментарии к ним, то выводит комментарий.
        - User_profileController.php - Это кабинет пользователя. Тут собраны методы для загрузки изображения пользовтеля, а так же для отображения его постов на форуме или
                                    записей в блоге.

        Каталог models содержит в себе модели для контроллеров. Все модели исползуют PDO.

        Каталог templates представляет собой каталог в котором содеражаться шаблоны для страниц. В шаблонах используется php код для вывода текста. Для вывода используется массив
            PageData. Вот пример использования: <?= $pageData['some_key'] ?>.

        Каталог views содержит в себе файл представления который "собирает" страницу.

        В корне проэкта содержится config.php в котором описаны настройки для сайта. Ключевыми являются определения директорий, объявление глобального массива $env,
            подключение файла роутера и файла настройки баззы данных. Так же там указана инициализация для переменных используемых в дальнейшем в проэкте. Данные переменне
            обязательны для правильной работоспособности проэкта и их не стоит удалять. При появлении новых переменных общего харатера их стоит добавить используя форму:
            " $env['id'] = $_POST['id']?? '' " или " $env['active'] = '' ". Это реальные переменные которые приведенны как пример. В конце фала указаны загрузка котроллера,
            модели и преставления, а так же конструктор для построения сайта.

        Файл GOOGLE_OAUTH_SETUP.md представляет собой краткую инструкцию по установке гугл сервиса авторизации.

        QUICK_START.md - Быстрый старт гугл авторизации.

        test_config.php - Файл-тес для проверки работоспособности гугл авторизации. к нему прилагаюся еще 2 теста которые по своей сути похожи между собой.
        Это test_google_oauth.php и test_google_simple.php. Они отличаются только визуальным представлением насколько я могу судить.

        В файле index.php мы показываем все ошибки используя ini_set('display_errors', 1) и ini_set('error_reporting', E_ALL), (которые удалятся при релизе).  А так же
            вызываем config.php

        update_database.sql - Нужен для добавления в базу данных нужных колонок для работы гугл авторизации.

        Отдельно стоит выделить Страницу с ошибками. Пользовательска страница с ошибками реализована на контроллере ErrorController.php. В этом контроллере описаны
            наиболее популярные ошибки и пользовательский текс который будет выводится при их появлении. Если появляются ошибки код которых не предусмотрен заранее
            их стоит добавить в метод handleGeneralException(Exception $e): string после 100   => 'Application specific error.',   // Custom app-specific error.
            Пишем код ошибки => 'Пользовательское описание'. В слечае если есть страница которая временно не работает, или которуюю надо отключить стоит сделать следущее.
            Прописываем в роутере путь к этой странице точно указывая путь, что бы не закрыть доступ к другим страницая и пишем - throw new Exception("Page", 404).